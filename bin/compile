#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
unset GIT_DIR

function print() {
  echo "-----> $1"
}

# Taken from https://devcenter.heroku.com/articles/buildpack-api#bin-compile-summary
function export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
        export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}
# Taken from https://devcenter.heroku.com/articles/buildpack-api#style
function indent() {
  sed -u 's/^/       /'
}
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}

export_env_dir "$3"

# Create the cache directory if not exist.
mkdir -p $CACHE_DIR
if [ -n "$FLUTTER_BUILD_DIR" ]; then
  APP_DIR=$BUILD_DIR/$FLUTTER_BUILD_DIR
else
  APP_DIR=$BUILD_DIR
fi
cd "$APP_DIR"

if [ -d "$CACHE_DIR/flutter" ]; then
  print "Restoring Flutter SDK from CACHE"
  cp -R $CACHE_DIR/flutter $APP_DIR
else
  print "Installing SDK from Github repository."
  git clone https://github.com/flutter/flutter.git --quiet | indent
fi

if [ -n "$FLUTTER_ENV_FILE" ]; then
  print "Generate .env file"
  touch .env
  echo $FLUTTER_ENV_FILE | base64 --decode > .env
fi

print "Enabling Web support"
flutter/bin/flutter config --enable-web --quiet | indent

print "Getting packages from Flutter project"
flutter/bin/flutter pub get | indent

PATH="$PATH":"$(pwd)/flutter/bin/"

print "Generate localizations"
flutter/bin/flutter gen-l10n

print "Compiling the project"
flutter/bin/flutter build web --release --quiet --web-renderer html

PUB_CACHE="$HOME/.pub-cache/"
mkdir -p $PUB_CACHE

# Saving SDK in Cache and in app.
if [ -x flutter/bin/flutter ]; then
  print "Saving Flutter SDK in Cache"
  rm -rf $CACHE_DIR/flutter
  cp -R $APP_DIR/flutter $CACHE_DIR/flutter
  mv $APP_DIR/flutter/bin/cache/dart-sdk/ $APP_DIR
  rm -rf $APP_DIR/flutter
fi

#  To read hidden directories and use move with exclusion.
shopt -s extglob

# Check  FLUTTER_CLEANUP var to delete all files or keep it.
mkdir -p $APP_DIR/TO_DELETE

mv !("TO_DELETE") TO_DELETE
mv TO_DELETE/build/web/* $APP_DIR
mv TO_DELETE/dart-sdk $APP_DIR
rm -rf TO_DELETE

# Activate dhttpd dart package to run the server.
# Is taken from my Github repo because some variables need to be changed every run
# like PORT from environment.

if [ -d "$CACHE_DIR/.pub-cache/" ]; then
  print "dhttpd Found in cache. Restoring."
  cp -R $CACHE_DIR/.pub-cache/* $PUB_CACHE
else
  print "Getting dhttpd to run web service."
  $APP_DIR/dart-sdk/bin/dart pub global activate dhttpd | indent

  print "Getting dhtppd to run web service."
  mkdir -p $CACHE_DIR/.pub-cache/
  cp -R $PUB_CACHE/* $CACHE_DIR/.pub-cache/
fi

# Moving to the build, after running the compile. All will be deleted and removed to app directory.
# Copying the result, the files will be kept in storage.
cp -R $PUB_CACHE $APP_DIR

if [ -n "$FLUTTER_DEPLOY_DIR" ]; then
  cp -r "$APP_DIR" "$BUILD_DIR/$FLUTTER_DEPLOY_DIR"
fi

du -h -d 2 | sort -n

export PATH="$PATH":"/$APP_DIR/dart-sdk/bin/"
export PATH="$PATH":"/$APP_DIR/.pub-cache/bin"